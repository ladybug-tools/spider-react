// tslint:disable
/**
 * Honeybee Model Schema
 * This is the documentation for Honeybee model schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@ladybug.tools
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// Some imports not used depending on template conditions

/**
 * 
 * @export
 * @interface Adiabatic
 */
export interface Adiabatic {
  /**
   * 
   * @type {string}
   * @memberof Adiabatic
   */
  type: AdiabaticTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AdiabaticTypeEnum {
  Adiabatic = 'Adiabatic'
}

/**
 * 
 * @export
 * @interface Aperture
 */
export interface Aperture {
  /**
   * 
   * @type {string}
   * @memberof Aperture
   */
  type: ApertureTypeEnum;
  /**
   * 
   * @type {Face3D}
   * @memberof Aperture
   */
  geometry: Face3D;
  /**
   * 
   * @type {Outdoors | Surface}
   * @memberof Aperture
   */
  boundary_condition: Outdoors | Surface;
  /**
   * 
   * @type {AperturePropertiesAbridged}
   * @memberof Aperture
   */
  properties: AperturePropertiesAbridged;
  /**
   * 
   * @type {string}
   * @memberof Aperture
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof Aperture
   */
  display_name?: string;
  /**
   * 
   * @type {boolean}
   * @memberof Aperture
   */
  is_operable?: boolean;
  /**
   * 
   * @type {Array<Shade>}
   * @memberof Aperture
   */
  indoor_shades?: Array<Shade>;
  /**
   * 
   * @type {Array<Shade>}
   * @memberof Aperture
   */
  outdoor_shades?: Array<Shade>;
}

/**
    * @export
    * @enum {string}
    */
export enum ApertureTypeEnum {
  Aperture = 'Aperture'
}

/**
 * 
 * @export
 * @interface ApertureEnergyPropertiesAbridged
 */
export interface ApertureEnergyPropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof ApertureEnergyPropertiesAbridged
   */
  type: ApertureEnergyPropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ApertureEnergyPropertiesAbridged
   */
  construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ApertureEnergyPropertiesAbridgedTypeEnum {
  ApertureEnergyPropertiesAbridged = 'ApertureEnergyPropertiesAbridged'
}

/**
 * 
 * @export
 * @interface AperturePropertiesAbridged
 */
export interface AperturePropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof AperturePropertiesAbridged
   */
  type: AperturePropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {ApertureEnergyPropertiesAbridged}
   * @memberof AperturePropertiesAbridged
   */
  energy?: ApertureEnergyPropertiesAbridged;
}

/**
    * @export
    * @enum {string}
    */
export enum AperturePropertiesAbridgedTypeEnum {
  AperturePropertiesAbridged = 'AperturePropertiesAbridged'
}

/**
 * A set of constructions for aperture assemblies.
 * @export
 * @interface ApertureSetAbridged
 */
export interface ApertureSetAbridged {
  /**
   * 
   * @type {string}
   * @memberof ApertureSetAbridged
   */
  type: ApertureSetAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ApertureSetAbridged
   */
  interior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof ApertureSetAbridged
   */
  window_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof ApertureSetAbridged
   */
  skylight_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof ApertureSetAbridged
   */
  operable_construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ApertureSetAbridgedTypeEnum {
  ApertureSetAbridged = 'ApertureSetAbridged'
}

/**
 * A set of constructions for different surface types and boundary conditions.
 * @export
 * @interface ConstructionSetAbridged
 */
export interface ConstructionSetAbridged {
  /**
   * 
   * @type {string}
   * @memberof ConstructionSetAbridged
   */
  type: ConstructionSetAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ConstructionSetAbridged
   */
  name: string;
  /**
   * 
   * @type {WallSetAbridged}
   * @memberof ConstructionSetAbridged
   */
  wall_set?: WallSetAbridged;
  /**
   * 
   * @type {FloorSetAbridged}
   * @memberof ConstructionSetAbridged
   */
  floor_set?: FloorSetAbridged;
  /**
   * 
   * @type {RoofCeilingSetAbridged}
   * @memberof ConstructionSetAbridged
   */
  roof_ceiling_set?: RoofCeilingSetAbridged;
  /**
   * 
   * @type {ApertureSetAbridged}
   * @memberof ConstructionSetAbridged
   */
  aperture_set?: ApertureSetAbridged;
  /**
   * 
   * @type {DoorSetAbridged}
   * @memberof ConstructionSetAbridged
   */
  door_set?: DoorSetAbridged;
  /**
   * 
   * @type {string}
   * @memberof ConstructionSetAbridged
   */
  shade_construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ConstructionSetAbridgedTypeEnum {
  ConstructionSetAbridged = 'ConstructionSetAbridged'
}

/**
 * 
 * @export
 * @interface Door
 */
export interface Door {
  /**
   * 
   * @type {string}
   * @memberof Door
   */
  type: DoorTypeEnum;
  /**
   * 
   * @type {Face3D}
   * @memberof Door
   */
  geometry: Face3D;
  /**
   * 
   * @type {Outdoors | Surface}
   * @memberof Door
   */
  boundary_condition: Outdoors | Surface;
  /**
   * 
   * @type {DoorPropertiesAbridged}
   * @memberof Door
   */
  properties: DoorPropertiesAbridged;
  /**
   * 
   * @type {string}
   * @memberof Door
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof Door
   */
  display_name?: string;
  /**
   * 
   * @type {boolean}
   * @memberof Door
   */
  is_glass?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum DoorTypeEnum {
  Door = 'Door'
}

/**
 * 
 * @export
 * @interface DoorEnergyPropertiesAbridged
 */
export interface DoorEnergyPropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof DoorEnergyPropertiesAbridged
   */
  type: DoorEnergyPropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof DoorEnergyPropertiesAbridged
   */
  construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DoorEnergyPropertiesAbridgedTypeEnum {
  DoorEnergyPropertiesAbridged = 'DoorEnergyPropertiesAbridged'
}

/**
 * 
 * @export
 * @interface DoorPropertiesAbridged
 */
export interface DoorPropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof DoorPropertiesAbridged
   */
  type: DoorPropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {DoorEnergyPropertiesAbridged}
   * @memberof DoorPropertiesAbridged
   */
  energy?: DoorEnergyPropertiesAbridged;
}

/**
    * @export
    * @enum {string}
    */
export enum DoorPropertiesAbridgedTypeEnum {
  DoorPropertiesAbridged = 'DoorPropertiesAbridged'
}

/**
 * A set of constructions for door assemblies.
 * @export
 * @interface DoorSetAbridged
 */
export interface DoorSetAbridged {
  /**
   * 
   * @type {string}
   * @memberof DoorSetAbridged
   */
  type: DoorSetAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof DoorSetAbridged
   */
  interior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof DoorSetAbridged
   */
  exterior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof DoorSetAbridged
   */
  overhead_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof DoorSetAbridged
   */
  exterior_glass_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof DoorSetAbridged
   */
  interior_glass_construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DoorSetAbridgedTypeEnum {
  DoorSetAbridged = 'DoorSetAbridged'
}

/**
 * Used to specify information about the electrical equipment.
 * @export
 * @interface ElectricEquipmentAbridged
 */
export interface ElectricEquipmentAbridged {
  /**
   * 
   * @type {string}
   * @memberof ElectricEquipmentAbridged
   */
  type: ElectricEquipmentAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ElectricEquipmentAbridged
   */
  name: string;
  /**
   * Equipment level per floor area expressed as watts/m².
   * @type {number}
   * @memberof ElectricEquipmentAbridged
   */
  watts_per_area: number;
  /**
   * Used to characterise the amount of long-wave radiation heat given off by electric equipment. Default value is 0.
   * @type {number}
   * @memberof ElectricEquipmentAbridged
   */
  radiant_fraction?: number;
  /**
   * Used to characterise the amount of latent heat given off by electricequipment. Default value is 0.
   * @type {number | string}
   * @memberof ElectricEquipmentAbridged
   */
  latent_fraction?: number | string;
  /**
   * Used to characterize the amount of “lost” heat being given off by equipment. The default value is 0.
   * @type {number}
   * @memberof ElectricEquipmentAbridged
   */
  lost_fraction?: number;
  /**
   * Used to describe the schedule for equipment as a fraction applied to design level for electric equipment.
   * @type {string}
   * @memberof ElectricEquipmentAbridged
   */
  schedule: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ElectricEquipmentAbridgedTypeEnum {
  ElectricEquipmentAbridged = 'ElectricEquipmentAbridged'
}

/**
 * Material \'types\' used to describe layers within opaque construction elements.
 * @export
 * @interface EnergyMaterial
 */
export interface EnergyMaterial {
  /**
   * 
   * @type {string}
   * @memberof EnergyMaterial
   */
  type: EnergyMaterialTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyMaterial
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof EnergyMaterial
   */
  roughness?: EnergyMaterialRoughnessEnum;
  /**
   * Thickness of the material layer in meters.
   * @type {number}
   * @memberof EnergyMaterial
   */
  thickness: number;
  /**
   * Thermal conductivity of the material layer in W/(m-K).
   * @type {number}
   * @memberof EnergyMaterial
   */
  conductivity: number;
  /**
   * Density of the material layer in kg/m3.
   * @type {number}
   * @memberof EnergyMaterial
   */
  density: number;
  /**
   * Specific heat of the material layer in J/(kg-K).
   * @type {number}
   * @memberof EnergyMaterial
   */
  specific_heat: number;
  /**
   * Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9.
   * @type {number}
   * @memberof EnergyMaterial
   */
  thermal_absorptance?: number;
  /**
   * Fraction of incident solar radiation absorbed by the material. Default value is 0.7.
   * @type {number}
   * @memberof EnergyMaterial
   */
  solar_absorptance?: number;
  /**
   * Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7.
   * @type {number}
   * @memberof EnergyMaterial
   */
  visible_absorptance?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyMaterialTypeEnum {
  EnergyMaterial = 'EnergyMaterial'
}
/**
    * @export
    * @enum {string}
    */
export enum EnergyMaterialRoughnessEnum {
  VeryRough = 'VeryRough',
  Rough = 'Rough',
  MediumRough = 'MediumRough',
  MediumSmooth = 'MediumSmooth',
  Smooth = 'Smooth',
  VerySmooth = 'VerySmooth'
}

/**
 * Used when only the thermal resistance (R value) of the material is known. Used for opaque construction elements.
 * @export
 * @interface EnergyMaterialNoMass
 */
export interface EnergyMaterialNoMass {
  /**
   * 
   * @type {string}
   * @memberof EnergyMaterialNoMass
   */
  type: EnergyMaterialNoMassTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyMaterialNoMass
   */
  name: string;
  /**
   * Used to enter the thermal resistance (R-value) of the material layer in (m2-K)/W.
   * @type {number}
   * @memberof EnergyMaterialNoMass
   */
  r_value: number;
  /**
   * 
   * @type {string}
   * @memberof EnergyMaterialNoMass
   */
  roughness?: EnergyMaterialNoMassRoughnessEnum;
  /**
   * Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9.
   * @type {number}
   * @memberof EnergyMaterialNoMass
   */
  thermal_absorptance?: number;
  /**
   * Fraction of incident solar radiation absorbed by the material. Default value is 0.7.
   * @type {number}
   * @memberof EnergyMaterialNoMass
   */
  solar_absorptance?: number;
  /**
   * Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7.
   * @type {number}
   * @memberof EnergyMaterialNoMass
   */
  visible_absorptance?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyMaterialNoMassTypeEnum {
  EnergyMaterialNoMass = 'EnergyMaterialNoMass'
}
/**
    * @export
    * @enum {string}
    */
export enum EnergyMaterialNoMassRoughnessEnum {
  VeryRough = 'VeryRough',
  Rough = 'Rough',
  MediumRough = 'MediumRough',
  MediumSmooth = 'MediumSmooth',
  Smooth = 'Smooth',
  VerySmooth = 'VerySmooth'
}

/**
 * Window blind properties.  Window blind properties consist of flat, equally-spaced slats.
 * @export
 * @interface EnergyWindowMaterialBlind
 */
export interface EnergyWindowMaterialBlind {
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialBlind
   */
  type: EnergyWindowMaterialBlindTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialBlind
   */
  slat_orientation: EnergyWindowMaterialBlindSlatOrientationEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialBlind
   */
  name: string;
  /**
   * The width of slat measured from edge to edge in meters.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  slat_width?: number;
  /**
   * The distance between the front of a slat and the back of the adjacent slat in meters.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  slat_separation?: number;
  /**
   * The distance between the faces of a slat in meters. The default value is 0.001.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  slat_thickness?: number;
  /**
   * The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  slat_angle?: number;
  /**
   * The thermal conductivity of the slat in W/(m-K). Default value is 221.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  slat_conductivity?: number;
  /**
   * The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  beam_solar_transmittance?: number;
  /**
   * The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  beam_solar_reflectance?: number;
  /**
   * The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  beam_solar_reflectance_back?: number;
  /**
   * The slat transmittance for hemisperically diffuse solar radiation. Default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  diffuse_solar_transmittance?: number;
  /**
   * The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  diffuse_solar_reflectance?: number;
  /**
   * The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  diffuse_solar_reflectance_back?: number;
  /**
   * The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  beam_visible_transmittance?: number;
  /**
   * The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  beam_visible_reflectance?: number;
  /**
   * The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  beam_visible_reflectance_back?: number;
  /**
   * The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.”
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  diffuse_visible_transmittance?: number;
  /**
   * The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  diffuse_visible_reflectance?: number;
  /**
   * The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.”
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  diffuse_visible_reflectance_back?: number;
  /**
   * The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  infrared_transmittance?: number;
  /**
   * Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  emissivity?: number;
  /**
   * Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  emissivity_back?: number;
  /**
   * The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  distance_to_glass?: number;
  /**
   * The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  top_opening_multiplier?: number;
  /**
   * The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  bottom_opening_multiplier?: number;
  /**
   * The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  left_opening_multiplier?: number;
  /**
   * The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  right_opening_multiplier?: number;
  /**
   * The minimum allowed slat angle in degrees. The default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  minimum_slat_angle?: number;
  /**
   * The maximum allowed slat angle in degrees. The default value is 180.
   * @type {number}
   * @memberof EnergyWindowMaterialBlind
   */
  maximum_slat_angle?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialBlindTypeEnum {
  EnergyWindowMaterialBlind = 'EnergyWindowMaterialBlind'
}
/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialBlindSlatOrientationEnum {
  Horizontal = 'Horizontal',
  Vertical = 'Vertical',
  ChoicesIncludeHorizontalAndVerticalHorizontalMeansTheSlats = 'Choices include Horizontal and Vertical. Horizontal means the slats'
}

/**
 * Create single layer of gas.  Can be combined with EnergyWindowMaterialGlazing to make multi-pane windows.
 * @export
 * @interface EnergyWindowMaterialGas
 */
export interface EnergyWindowMaterialGas {
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGas
   */
  type: EnergyWindowMaterialGasTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGas
   */
  name?: string;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGas
   */
  gas_type?: EnergyWindowMaterialGasGasTypeEnum;
  /**
   * Thickness of the gas layer in meters. Default value is 0.0125.
   * @type {number}
   * @memberof EnergyWindowMaterialGas
   */
  thickness?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialGasTypeEnum {
  EnergyWindowMaterialGas = 'EnergyWindowMaterialGas'
}
/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialGasGasTypeEnum {
  Air = 'Air',
  Argon = 'Argon',
  Krypton = 'Krypton',
  Xenon = 'Xenon'
}

/**
 * Create single layer of custom gas.
 * @export
 * @interface EnergyWindowMaterialGasCustom
 */
export interface EnergyWindowMaterialGasCustom {
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGasCustom
   */
  type: EnergyWindowMaterialGasCustomTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGasCustom
   */
  name: string;
  /**
   * Thickness of the gas layer in meters. Default value is 0.0125.
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  thickness?: number;
  /**
   * The A coefficient for gas conductivity in W/(m-K).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  conductivity_coeff_a: number;
  /**
   * The B coefficient for gas conductivity in W/(m-K2).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  conductivity_coeff_b?: number;
  /**
   * The C coefficient for gas conductivity in W/(m-K3).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  conductivity_coeff_c?: number;
  /**
   * The A coefficient for gas viscosity in kg/(m-s).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  viscosity_coeff_a: number;
  /**
   * The B coefficient for gas viscosity in kg/(m-s-K).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  viscosity_coeff_b?: number;
  /**
   * The C coefficient for gas viscosity in kg/(m-s-K2).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  viscosity_coeff_c?: number;
  /**
   * The A coefficient for gas specific heat in J/(kg-K).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  specific_heat_coeff_a: number;
  /**
   * The B coefficient for gas specific heat in J/(kg-K2).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  specific_heat_coeff_b?: number;
  /**
   * The C coefficient for gas specific heat in J/(kg-K3).
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  specific_heat_coeff_c?: number;
  /**
   * The specific heat ratio for gas.
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  specific_heat_ratio: number;
  /**
   * The molecular weight for gas in g/mol.
   * @type {number}
   * @memberof EnergyWindowMaterialGasCustom
   */
  molecular_weight: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialGasCustomTypeEnum {
  EnergyWindowMaterialGasCustom = 'EnergyWindowMaterialGasCustom'
}

/**
 * Create a mixture of two to four different gases to fill the panes of multiple pane windows.
 * @export
 * @interface EnergyWindowMaterialGasMixture
 */
export interface EnergyWindowMaterialGasMixture {
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGasMixture
   */
  type: EnergyWindowMaterialGasMixtureTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGasMixture
   */
  name: string;
  /**
   * The thickness of the gas mixture layer in meters.
   * @type {number}
   * @memberof EnergyWindowMaterialGasMixture
   */
  thickness: number;
  /**
   * Used to describe the type of gas and its fraction in a mixture ofgases.
   * @type {Array<GasTypeAndFraction>}
   * @memberof EnergyWindowMaterialGasMixture
   */
  gas_type_fraction: Array<GasTypeAndFraction>;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialGasMixtureTypeEnum {
  EnergyWindowMaterialGasMixture = 'EnergyWindowMaterialGasMixture'
}

/**
 * Describe a single glass pane corresponding to a layer in a window construction.
 * @export
 * @interface EnergyWindowMaterialGlazing
 */
export interface EnergyWindowMaterialGlazing {
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGlazing
   */
  type: EnergyWindowMaterialGlazingTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialGlazing
   */
  name: string;
  /**
   * The surface-to-surface of the glass in meters. Default value is 0.003.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  thickness?: number;
  /**
   * Transmittance of solar radiation through the glass at normal incidence. Default value is 0.85 for clear glass.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  solar_transmittance?: number;
  /**
   * Reflectance of solar radiation off of the front side of the glass at normal incidence, averaged over the solar spectrum. Default value is 0.075 for clear glass.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  solar_reflectance?: number;
  /**
   * Reflectance of solar radiation off of the back side of the glass at normal incidence, averaged over the solar spectrum.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  solar_reflectance_back?: number;
  /**
   * Transmittance of visible light through the glass at normal incidence. Default value is 0.9 for clear glass.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  visible_transmittance?: number;
  /**
   * Reflectance of visible light off of the front side of the glass at normal incidence. Default value is 0.075 for clear glass.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  visible_reflectance?: number;
  /**
   * Reflectance of visible light off of the back side of the glass at normal incidence averaged over the solar spectrum and weighted by the response of the human eye.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  visible_reflectance_back?: number;
  /**
   * Long-wave transmittance at normal incidence.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  infrared_transmittance?: number;
  /**
   * Infrared hemispherical emissivity of the front (outward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  emissivity?: number;
  /**
   * Infrared hemispherical emissivity of the back (inward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  emissivity_back?: number;
  /**
   * Thermal conductivity of the glass in W/(m-K). Default value is 0.9, which is  typical for clear glass without a low-e coating.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  conductivity?: number;
  /**
   * Factor that corrects for the presence of dirt on the glass. A default value of 1 indicates the glass is clean.
   * @type {number}
   * @memberof EnergyWindowMaterialGlazing
   */
  dirt_correction?: number;
  /**
   * Takes values True and False. If False (default), the beam solar radiation incident on the glass is transmitted as beam radiation with no diffuse component.If True, the beam  solar radiation incident on the glass is transmitted as hemispherical diffuse radiation with no beam component.
   * @type {boolean}
   * @memberof EnergyWindowMaterialGlazing
   */
  solar_diffusing?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialGlazingTypeEnum {
  EnergyWindowMaterialGlazing = 'EnergyWindowMaterialGlazing'
}

/**
 * This object specifies the properties of window shade materials.
 * @export
 * @interface EnergyWindowMaterialShade
 */
export interface EnergyWindowMaterialShade {
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialShade
   */
  type: EnergyWindowMaterialShadeTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialShade
   */
  name: string;
  /**
   * The transmittance averaged over the solar spectrum. It is assumed independent of incidence angle. Default value is 0.4.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  solar_transmittance?: number;
  /**
   * The reflectance averaged over the solar spectrum. It us assumed same on both sides of shade and independent of incidence angle. Default value is 0.5
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  solar_reflectance?: number;
  /**
   * The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  visible_transmittance?: number;
  /**
   * The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  visible_reflectance?: number;
  /**
   * The effective long-wave infrared hemispherical emissivity. It is assumed same on both sides of shade. Default value is 0.9.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  emissivity?: number;
  /**
   * The effective long-wave transmittance. It is assumed independent of incidence angle. Default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  infrared_transmittance?: number;
  /**
   * The thickness of the shade material in meters. Default value is 0.005.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  thickness?: number;
  /**
   * The conductivity of the shade material in W/(m-K). Default value is 0.1.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  conductivity?: number;
  /**
   * The distance from shade to adjacent glass in meters. Default value is 0.05
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  distance_to_glass?: number;
  /**
   * The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  top_opening_multiplier?: number;
  /**
   * The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  bottom_opening_multiplier?: number;
  /**
   * The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  left_opening_multiplier?: number;
  /**
   * The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. Default value is 0.5.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  right_opening_multiplier?: number;
  /**
   * The fraction of the shade surface that is open to air flow. If air cannot pass through the shade material, airflow_permeability = 0. Default value is 0.
   * @type {number}
   * @memberof EnergyWindowMaterialShade
   */
  airflow_permeability?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialShadeTypeEnum {
  EnergyWindowMaterialShade = 'EnergyWindowMaterialShade'
}

/**
 * Describe an entire glazing system rather than individual layers.  Used when only very limited information is available on the glazing layers or when specific performance levels are being targeted.
 * @export
 * @interface EnergyWindowMaterialSimpleGlazSys
 */
export interface EnergyWindowMaterialSimpleGlazSys {
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialSimpleGlazSys
   */
  type: EnergyWindowMaterialSimpleGlazSysTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof EnergyWindowMaterialSimpleGlazSys
   */
  name: string;
  /**
   * Used to describe the value for window system U-Factor, or overall heat transfer coefficient in W/(m2-K).
   * @type {number}
   * @memberof EnergyWindowMaterialSimpleGlazSys
   */
  u_factor: number;
  /**
   * Unitless  quantity describing Solar Heat Gain Coefficient for normal incidence and vertical orientation.
   * @type {number}
   * @memberof EnergyWindowMaterialSimpleGlazSys
   */
  shgc: number;
  /**
   * The fraction of visible light falling on the window that makes it through the glass at normal incidence.
   * @type {number}
   * @memberof EnergyWindowMaterialSimpleGlazSys
   */
  vt?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnergyWindowMaterialSimpleGlazSysTypeEnum {
  EnergyWindowMaterialSimpleGlazSys = 'EnergyWindowMaterialSimpleGlazSys'
}

/**
 * 
 * @export
 * @interface Face
 */
export interface Face {
  /**
   * 
   * @type {string}
   * @memberof Face
   */
  type: FaceTypeEnum;
  /**
   * 
   * @type {Face3D}
   * @memberof Face
   */
  geometry: Face3D;
  /**
   * 
   * @type {FacePropertiesAbridged}
   * @memberof Face
   */
  properties: FacePropertiesAbridged;
  /**
   * 
   * @type {string}
   * @memberof Face
   */
  face_type: FaceFaceTypeEnum;
  /**
   * 
   * @type {Ground | Outdoors | Adiabatic | Surface}
   * @memberof Face
   */
  boundary_condition: Ground | Outdoors | Adiabatic | Surface;
  /**
   * 
   * @type {string}
   * @memberof Face
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof Face
   */
  display_name?: string;
  /**
   * 
   * @type {Array<Aperture>}
   * @memberof Face
   */
  apertures?: Array<Aperture>;
  /**
   * 
   * @type {Array<Door>}
   * @memberof Face
   */
  doors?: Array<Door>;
  /**
   * 
   * @type {Array<Shade>}
   * @memberof Face
   */
  indoor_shades?: Array<Shade>;
  /**
   * 
   * @type {Array<Shade>}
   * @memberof Face
   */
  outdoor_shades?: Array<Shade>;
}

/**
    * @export
    * @enum {string}
    */
export enum FaceTypeEnum {
  Face = 'Face'
}
/**
    * @export
    * @enum {string}
    */
export enum FaceFaceTypeEnum {
  Wall = 'Wall',
  Floor = 'Floor',
  RoofCeiling = 'RoofCeiling',
  AirWall = 'AirWall'
}

/**
 * 
 * @export
 * @interface Face3D
 */
export interface Face3D {
  /**
   * 
   * @type {string}
   * @memberof Face3D
   */
  type: Face3DTypeEnum;
  /**
   * 
   * @type {Array<Array<number>>}
   * @memberof Face3D
   */
  boundary: Array<Array<number>>;
  /**
   * 
   * @type {Array<Array<Array<number>>>}
   * @memberof Face3D
   */
  holes?: Array<Array<Array<number>>>;
  /**
   * 
   * @type {Plane}
   * @memberof Face3D
   */
  plane?: Plane;
}

/**
    * @export
    * @enum {string}
    */
export enum Face3DTypeEnum {
  Face3D = 'Face3D'
}

/**
 * 
 * @export
 * @interface FaceEnergyPropertiesAbridged
 */
export interface FaceEnergyPropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof FaceEnergyPropertiesAbridged
   */
  type: FaceEnergyPropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof FaceEnergyPropertiesAbridged
   */
  construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FaceEnergyPropertiesAbridgedTypeEnum {
  FaceEnergyPropertiesAbridged = 'FaceEnergyPropertiesAbridged'
}

/**
 * 
 * @export
 * @interface FacePropertiesAbridged
 */
export interface FacePropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof FacePropertiesAbridged
   */
  type: FacePropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {FaceEnergyPropertiesAbridged}
   * @memberof FacePropertiesAbridged
   */
  energy?: FaceEnergyPropertiesAbridged;
}

/**
    * @export
    * @enum {string}
    */
export enum FacePropertiesAbridgedTypeEnum {
  FacePropertiesAbridged = 'FacePropertiesAbridged'
}

/**
 * A set of constructions for floor assemblies.
 * @export
 * @interface FloorSetAbridged
 */
export interface FloorSetAbridged {
  /**
   * 
   * @type {string}
   * @memberof FloorSetAbridged
   */
  type: FloorSetAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof FloorSetAbridged
   */
  interior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof FloorSetAbridged
   */
  exterior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof FloorSetAbridged
   */
  ground_construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FloorSetAbridgedTypeEnum {
  FloorSetAbridged = 'FloorSetAbridged'
}

/**
 * Used to specify information about the gas equipment.
 * @export
 * @interface GasEquipmentAbridged
 */
export interface GasEquipmentAbridged {
  /**
   * 
   * @type {string}
   * @memberof GasEquipmentAbridged
   */
  type: GasEquipmentAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof GasEquipmentAbridged
   */
  name: string;
  /**
   * Equipment level per floor area expressed as watts/m².
   * @type {number}
   * @memberof GasEquipmentAbridged
   */
  watts_per_area: number;
  /**
   * Used to characterise the amount of long-wave radiation heat given off by electric equipment.
   * @type {number}
   * @memberof GasEquipmentAbridged
   */
  radiant_fraction?: number;
  /**
   * Used to characterise the amount of latent heat given off by electricequipment. Default value is 0.
   * @type {number | string}
   * @memberof GasEquipmentAbridged
   */
  latent_fraction?: number | string;
  /**
   * Used to characterize the amount of “lost” heat being given off by equipment. The default value is 0.
   * @type {number}
   * @memberof GasEquipmentAbridged
   */
  lost_fraction?: number;
  /**
   * Used to describe the schedule for equipment as a fraction applied to design level for electric equipment.
   * @type {string}
   * @memberof GasEquipmentAbridged
   */
  schedule: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GasEquipmentAbridgedTypeEnum {
  GasEquipmentAbridged = 'GasEquipmentAbridged'
}

/**
 * 
 * @export
 * @interface GasTypeAndFraction
 */
export interface GasTypeAndFraction {
  /**
   * 
   * @type {string}
   * @memberof GasTypeAndFraction
   */
  gas_type: GasTypeAndFractionGasTypeEnum;
  /**
   * 
   * @type {number}
   * @memberof GasTypeAndFraction
   */
  gas_fraction: number;
}

/**
    * @export
    * @enum {string}
    */
export enum GasTypeAndFractionGasTypeEnum {
  Air = 'Air',
  Argon = 'Argon',
  Krypton = 'Krypton',
  Xenon = 'Xenon'
}

/**
 * 
 * @export
 * @interface Ground
 */
export interface Ground {
  /**
   * 
   * @type {string}
   * @memberof Ground
   */
  type: GroundTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum GroundTypeEnum {
  Ground = 'Ground'
}

/**
 * Provides a model for an ideal HVAC system.
 * @export
 * @interface IdealAirSystem
 */
export interface IdealAirSystem {
  /**
   * 
   * @type {string}
   * @memberof IdealAirSystem
   */
  type: IdealAirSystemTypeEnum;
  /**
   * 
   * @type {number | string}
   * @memberof IdealAirSystem
   */
  heating_limit?: number | string;
  /**
   * 
   * @type {number | string}
   * @memberof IdealAirSystem
   */
  cooling_limit?: number | string;
  /**
   * 
   * @type {string}
   * @memberof IdealAirSystem
   */
  economizer_type?: IdealAirSystemEconomizerTypeEnum;
  /**
   * 
   * @type {boolean}
   * @memberof IdealAirSystem
   */
  demand_control_ventilation?: boolean;
  /**
   * 
   * @type {number}
   * @memberof IdealAirSystem
   */
  sensible_heat_recovery?: number;
  /**
   * 
   * @type {number}
   * @memberof IdealAirSystem
   */
  latent_heat_recovery?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum IdealAirSystemTypeEnum {
  IdealAirSystem = 'IdealAirSystem'
}
/**
    * @export
    * @enum {string}
    */
export enum IdealAirSystemEconomizerTypeEnum {
  NoEconomizer = 'NoEconomizer',
  DifferentialDryBulb = 'DifferentialDryBulb',
  DifferentialEnthalpy = 'DifferentialEnthalpy'
}

/**
 * Used to model the infiltration of air from the outdoor environment into a thermal zone.
 * @export
 * @interface InfiltrationAbridged
 */
export interface InfiltrationAbridged {
  /**
   * 
   * @type {string}
   * @memberof InfiltrationAbridged
   */
  type: InfiltrationAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof InfiltrationAbridged
   */
  name: string;
  /**
   * Used to model the infiltration per exterior surface area in m3/s-m2.
   * @type {number}
   * @memberof InfiltrationAbridged
   */
  flow_per_exterior_area: number;
  /**
   * 
   * @type {number}
   * @memberof InfiltrationAbridged
   */
  constant_coefficient?: number;
  /**
   * 
   * @type {number}
   * @memberof InfiltrationAbridged
   */
  temperature_coefficient?: number;
  /**
   * 
   * @type {number}
   * @memberof InfiltrationAbridged
   */
  velocity_coefficient?: number;
  /**
   * Used to describe the schedule for equipment as a fraction applied to design level for electric equipment.
   * @type {string}
   * @memberof InfiltrationAbridged
   */
  schedule: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InfiltrationAbridgedTypeEnum {
  InfiltrationAbridged = 'InfiltrationAbridged'
}

/**
 * Used to specify the information about the electric lighting system.
 * @export
 * @interface LightingAbridged
 */
export interface LightingAbridged {
  /**
   * 
   * @type {string}
   * @memberof LightingAbridged
   */
  type: LightingAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof LightingAbridged
   */
  name: string;
  /**
   * Lighting per floor area expressed as watts/m².
   * @type {number}
   * @memberof LightingAbridged
   */
  watts_per_area: number;
  /**
   * The fraction of heat from lights that goes into the zone as visible (short-wave) radiation. The default value is `0.25`.
   * @type {number}
   * @memberof LightingAbridged
   */
  visible_fraction?: number;
  /**
   * The fraction of heat from lights that is long-wave radiation. Default value is `0.32`.
   * @type {number}
   * @memberof LightingAbridged
   */
  radiant_fraction?: number;
  /**
   * The fraction of the heat from lights that goes into the zone return air. Default value is `0`.
   * @type {number}
   * @memberof LightingAbridged
   */
  return_air_fraction?: number;
  /**
   * Used to describe the schedule for lighting as a fraction applied to design level of lights.
   * @type {string}
   * @memberof LightingAbridged
   */
  schedule: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LightingAbridgedTypeEnum {
  LightingAbridged = 'LightingAbridged'
}

/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
  /**
   * 
   * @type {string}
   * @memberof Model
   */
  type: ModelTypeEnum;
  /**
   * 
   * @type {ModelProperties}
   * @memberof Model
   */
  properties: ModelProperties;
  /**
   * 
   * @type {string}
   * @memberof Model
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof Model
   */
  display_name?: string;
  /**
   * 
   * @type {Array<Room>}
   * @memberof Model
   */
  rooms?: Array<Room>;
  /**
   * 
   * @type {Array<Face>}
   * @memberof Model
   */
  orphaned_faces?: Array<Face>;
  /**
   * 
   * @type {Array<Shade>}
   * @memberof Model
   */
  orphaned_shades?: Array<Shade>;
  /**
   * 
   * @type {Array<Aperture>}
   * @memberof Model
   */
  orphaned_apertures?: Array<Aperture>;
  /**
   * 
   * @type {Array<Door>}
   * @memberof Model
   */
  orphaned_doors?: Array<Door>;
  /**
   * 
   * @type {number}
   * @memberof Model
   */
  north_angle?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelTypeEnum {
  Model = 'Model'
}

/**
 * Date.
 * @export
 * @interface ModelDate
 */
export interface ModelDate {
  /**
   * A value for month between `1`-`12`. Default is `1`.
   * @type {number}
   * @memberof ModelDate
   */
  month?: number;
  /**
   * A value for day between `1`-`31`. Default is `1`.
   * @type {number}
   * @memberof ModelDate
   */
  day?: number;
  /**
   * 
   * @type {boolean}
   * @memberof ModelDate
   */
  is_leap_year?: boolean;
}
/**
 * 
 * @export
 * @interface ModelEnergyProperties
 */
export interface ModelEnergyProperties {
  /**
   * 
   * @type {string}
   * @memberof ModelEnergyProperties
   */
  type: ModelEnergyPropertiesTypeEnum;
  /**
   * 
   * @type {Array<OpaqueConstructionAbridged | WindowConstructionAbridged | ShadeConstruction>}
   * @memberof ModelEnergyProperties
   */
  constructions: Array<OpaqueConstructionAbridged | WindowConstructionAbridged | ShadeConstruction>;
  /**
   * 
   * @type {Array<EnergyMaterial | EnergyMaterialNoMass | EnergyWindowMaterialGas | EnergyWindowMaterialGasCustom | EnergyWindowMaterialGasMixture | EnergyWindowMaterialSimpleGlazSys | EnergyWindowMaterialBlind | EnergyWindowMaterialGlazing | EnergyWindowMaterialShade>}
   * @memberof ModelEnergyProperties
   */
  materials: Array<EnergyMaterial | EnergyMaterialNoMass | EnergyWindowMaterialGas | EnergyWindowMaterialGasCustom | EnergyWindowMaterialGasMixture | EnergyWindowMaterialSimpleGlazSys | EnergyWindowMaterialBlind | EnergyWindowMaterialGlazing | EnergyWindowMaterialShade>;
  /**
   * 
   * @type {Array<ConstructionSetAbridged>}
   * @memberof ModelEnergyProperties
   */
  construction_sets?: Array<ConstructionSetAbridged>;
  /**
   * 
   * @type {string}
   * @memberof ModelEnergyProperties
   */
  global_construction_set?: string;
  /**
   * 
   * @type {Array<ProgramTypeAbridged>}
   * @memberof ModelEnergyProperties
   */
  program_types?: Array<ProgramTypeAbridged>;
  /**
   * 
   * @type {Array<ScheduleRulesetAbridged | ScheduleFixedIntervalAbridged>}
   * @memberof ModelEnergyProperties
   */
  schedules?: Array<ScheduleRulesetAbridged | ScheduleFixedIntervalAbridged>;
  /**
   * 
   * @type {Array<ScheduleTypeLimit>}
   * @memberof ModelEnergyProperties
   */
  schedule_type_limits?: Array<ScheduleTypeLimit>;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelEnergyPropertiesTypeEnum {
  ModelEnergyProperties = 'ModelEnergyProperties'
}

/**
 * 
 * @export
 * @interface ModelProperties
 */
export interface ModelProperties {
  /**
   * 
   * @type {string}
   * @memberof ModelProperties
   */
  type: ModelPropertiesTypeEnum;
  /**
   * 
   * @type {ModelEnergyProperties}
   * @memberof ModelProperties
   */
  energy: ModelEnergyProperties;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelPropertiesTypeEnum {
  ModelProperties = 'ModelProperties'
}

/**
 * Group of objects to describe the physical properties and configuration for the building envelope and interior elements that is the walls, roofs, floors, and doors of the building.
 * @export
 * @interface OpaqueConstructionAbridged
 */
export interface OpaqueConstructionAbridged {
  /**
   * 
   * @type {string}
   * @memberof OpaqueConstructionAbridged
   */
  type: OpaqueConstructionAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof OpaqueConstructionAbridged
   */
  name: string;
  /**
   * List of materials. The order of the materials is from outside to inside.
   * @type {Array<string>}
   * @memberof OpaqueConstructionAbridged
   */
  layers: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum OpaqueConstructionAbridgedTypeEnum {
  OpaqueConstructionAbridged = 'OpaqueConstructionAbridged'
}

/**
 * 
 * @export
 * @interface Outdoors
 */
export interface Outdoors {
  /**
   * 
   * @type {string}
   * @memberof Outdoors
   */
  type: OutdoorsTypeEnum;
  /**
   * 
   * @type {boolean}
   * @memberof Outdoors
   */
  sun_exposure?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof Outdoors
   */
  wind_exposure?: boolean;
  /**
   * 
   * @type {string | number}
   * @memberof Outdoors
   */
  view_factor?: string | number;
}

/**
    * @export
    * @enum {string}
    */
export enum OutdoorsTypeEnum {
  Outdoors = 'Outdoors'
}

/**
 * Used to model the occupant\'s effect on the space conditions.
 * @export
 * @interface PeopleAbridged
 */
export interface PeopleAbridged {
  /**
   * 
   * @type {string}
   * @memberof PeopleAbridged
   */
  type: PeopleAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof PeopleAbridged
   */
  name: string;
  /**
   * People per floor area expressed as people/m²
   * @type {number}
   * @memberof PeopleAbridged
   */
  people_per_area: number;
  /**
   * The radiant fraction of sensible heat released by people. The defaultvalue is 0.30.
   * @type {number}
   * @memberof PeopleAbridged
   */
  radiant_fraction?: number;
  /**
   * Used to specify a fixed latent fraction of heat gain due to people.
   * @type {number | string}
   * @memberof PeopleAbridged
   */
  latent_fraction?: number | string;
  /**
   * Used to describe the occupancy schedule for people.
   * @type {string}
   * @memberof PeopleAbridged
   */
  occupancy_schedule: string;
  /**
   * Schedule that determines the amount of heat gain per person.
   * @type {string}
   * @memberof PeopleAbridged
   */
  activity_schedule: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeopleAbridgedTypeEnum {
  PeopleAbridged = 'PeopleAbridged'
}

/**
 * 
 * @export
 * @interface Plane
 */
export interface Plane {
  /**
   * Plane Normal
   * @type {Array<number>}
   * @memberof Plane
   */
  n: Array<number>;
  /**
   * Plane Origin
   * @type {Array<number>}
   * @memberof Plane
   */
  o: Array<number>;
  /**
   * Plane X-axis
   * @type {Array<number>}
   * @memberof Plane
   */
  x?: Array<number>;
}
/**
 * A set of programs.
 * @export
 * @interface ProgramTypeAbridged
 */
export interface ProgramTypeAbridged {
  /**
   * 
   * @type {string}
   * @memberof ProgramTypeAbridged
   */
  type: ProgramTypeAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ProgramTypeAbridged
   */
  name: string;
  /**
   * 
   * @type {PeopleAbridged}
   * @memberof ProgramTypeAbridged
   */
  people?: PeopleAbridged;
  /**
   * 
   * @type {LightingAbridged}
   * @memberof ProgramTypeAbridged
   */
  lighting?: LightingAbridged;
  /**
   * 
   * @type {ElectricEquipmentAbridged}
   * @memberof ProgramTypeAbridged
   */
  electrical_equipment?: ElectricEquipmentAbridged;
  /**
   * 
   * @type {GasEquipmentAbridged}
   * @memberof ProgramTypeAbridged
   */
  gas_equipment?: GasEquipmentAbridged;
  /**
   * 
   * @type {InfiltrationAbridged}
   * @memberof ProgramTypeAbridged
   */
  infiltration?: InfiltrationAbridged;
  /**
   * 
   * @type {VentilationAbridged}
   * @memberof ProgramTypeAbridged
   */
  ventilation?: VentilationAbridged;
  /**
   * 
   * @type {SetpointAbridged}
   * @memberof ProgramTypeAbridged
   */
  setpoint?: SetpointAbridged;
}

/**
    * @export
    * @enum {string}
    */
export enum ProgramTypeAbridgedTypeEnum {
  ProgramTypeAbridged = 'ProgramTypeAbridged'
}

/**
 * A set of constructions for roof and ceiling assemblies.
 * @export
 * @interface RoofCeilingSetAbridged
 */
export interface RoofCeilingSetAbridged {
  /**
   * 
   * @type {string}
   * @memberof RoofCeilingSetAbridged
   */
  type: RoofCeilingSetAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof RoofCeilingSetAbridged
   */
  interior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof RoofCeilingSetAbridged
   */
  exterior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof RoofCeilingSetAbridged
   */
  ground_construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum RoofCeilingSetAbridgedTypeEnum {
  RoofCeilingSetAbridged = 'RoofCeilingSetAbridged'
}

/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
  /**
   * 
   * @type {string}
   * @memberof Room
   */
  type: RoomTypeEnum;
  /**
   * 
   * @type {RoomPropertiesAbridged}
   * @memberof Room
   */
  properties: RoomPropertiesAbridged;
  /**
   * 
   * @type {string}
   * @memberof Room
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof Room
   */
  display_name?: string;
  /**
   * 
   * @type {Array<Face>}
   * @memberof Room
   */
  faces: Array<Face>;
  /**
   * 
   * @type {Array<Shade>}
   * @memberof Room
   */
  indoor_shades?: Array<Shade>;
  /**
   * 
   * @type {Array<Shade>}
   * @memberof Room
   */
  outdoor_shades?: Array<Shade>;
}

/**
    * @export
    * @enum {string}
    */
export enum RoomTypeEnum {
  Room = 'Room'
}

/**
 * 
 * @export
 * @interface RoomEnergyPropertiesAbridged
 */
export interface RoomEnergyPropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof RoomEnergyPropertiesAbridged
   */
  type: RoomEnergyPropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof RoomEnergyPropertiesAbridged
   */
  construction_set?: string;
  /**
   * 
   * @type {string}
   * @memberof RoomEnergyPropertiesAbridged
   */
  program_type?: string;
  /**
   * 
   * @type {PeopleAbridged}
   * @memberof RoomEnergyPropertiesAbridged
   */
  people?: PeopleAbridged;
  /**
   * 
   * @type {LightingAbridged}
   * @memberof RoomEnergyPropertiesAbridged
   */
  lighting?: LightingAbridged;
  /**
   * 
   * @type {ElectricEquipmentAbridged}
   * @memberof RoomEnergyPropertiesAbridged
   */
  electric_equipment?: ElectricEquipmentAbridged;
  /**
   * 
   * @type {GasEquipmentAbridged}
   * @memberof RoomEnergyPropertiesAbridged
   */
  gas_equipment?: GasEquipmentAbridged;
  /**
   * 
   * @type {InfiltrationAbridged}
   * @memberof RoomEnergyPropertiesAbridged
   */
  infiltration?: InfiltrationAbridged;
  /**
   * 
   * @type {VentilationAbridged}
   * @memberof RoomEnergyPropertiesAbridged
   */
  ventilation?: VentilationAbridged;
  /**
   * 
   * @type {SetpointAbridged}
   * @memberof RoomEnergyPropertiesAbridged
   */
  setpoint?: SetpointAbridged;
  /**
   * 
   * @type {IdealAirSystem}
   * @memberof RoomEnergyPropertiesAbridged
   */
  hvac?: IdealAirSystem;
}

/**
    * @export
    * @enum {string}
    */
export enum RoomEnergyPropertiesAbridgedTypeEnum {
  RoomEnergyPropertiesAbridged = 'RoomEnergyPropertiesAbridged'
}

/**
 * 
 * @export
 * @interface RoomPropertiesAbridged
 */
export interface RoomPropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof RoomPropertiesAbridged
   */
  type: RoomPropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {RoomEnergyPropertiesAbridged}
   * @memberof RoomPropertiesAbridged
   */
  energy: RoomEnergyPropertiesAbridged;
}

/**
    * @export
    * @enum {string}
    */
export enum RoomPropertiesAbridgedTypeEnum {
  RoomPropertiesAbridged = 'RoomPropertiesAbridged'
}

/**
 * Used to describe the daily schedule for a single simulation day.
 * @export
 * @interface ScheduleDay
 */
export interface ScheduleDay {
  /**
   * 
   * @type {string}
   * @memberof ScheduleDay
   */
  type: ScheduleDayTypeEnum;
  /**
   * 
   * @type {Array<number>}
   * @memberof ScheduleDay
   */
  values: Array<number>;
  /**
   * 
   * @type {Array<Array<number>>}
   * @memberof ScheduleDay
   */
  times: Array<Array<number>>;
  /**
   * 
   * @type {string}
   * @memberof ScheduleDay
   */
  name: string;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleDay
   */
  interpolate?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ScheduleDayTypeEnum {
  ScheduleDay = 'ScheduleDay'
}

/**
 * Used to specify a start date and a list of values for a period of analysis.
 * @export
 * @interface ScheduleFixedIntervalAbridged
 */
export interface ScheduleFixedIntervalAbridged {
  /**
   * 
   * @type {string}
   * @memberof ScheduleFixedIntervalAbridged
   */
  type: ScheduleFixedIntervalAbridgedTypeEnum;
  /**
   * 
   * @type {ModelDate}
   * @memberof ScheduleFixedIntervalAbridged
   */
  start_date: ModelDate;
  /**
   * 
   * @type {string}
   * @memberof ScheduleFixedIntervalAbridged
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof ScheduleFixedIntervalAbridged
   */
  schedule_type_limit?: string;
  /**
   * 
   * @type {number}
   * @memberof ScheduleFixedIntervalAbridged
   */
  timestep?: number;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleFixedIntervalAbridged
   */
  interpolate?: boolean;
  /**
   * A list of hourly values for the simulation.
   * @type {Array<number>}
   * @memberof ScheduleFixedIntervalAbridged
   */
  values: Array<number>;
}

/**
    * @export
    * @enum {string}
    */
export enum ScheduleFixedIntervalAbridgedTypeEnum {
  ScheduleFixedIntervalAbridged = 'ScheduleFixedIntervalAbridged'
}

/**
 * A set of rules assigned to schedule ruleset for specific periods of time and for particular days of the week according to a priority sequence.
 * @export
 * @interface ScheduleRuleAbridged
 */
export interface ScheduleRuleAbridged {
  /**
   * 
   * @type {string}
   * @memberof ScheduleRuleAbridged
   */
  type: ScheduleRuleAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ScheduleRuleAbridged
   */
  schedule_day: string;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_sunday?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_monday?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_tuesday?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_wednesday?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_thursday?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_friday?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_saturday?: boolean;
  /**
   * 
   * @type {boolean}
   * @memberof ScheduleRuleAbridged
   */
  apply_holiday?: boolean;
  /**
   * 
   * @type {Array<number>}
   * @memberof ScheduleRuleAbridged
   */
  start_date?: Array<number>;
  /**
   * 
   * @type {Array<number>}
   * @memberof ScheduleRuleAbridged
   */
  end_date?: Array<number>;
}

/**
    * @export
    * @enum {string}
    */
export enum ScheduleRuleAbridgedTypeEnum {
  ScheduleRuleAbridged = 'ScheduleRuleAbridged'
}

/**
 * Used to define a schedule for a default day, further described by ScheduleRule.
 * @export
 * @interface ScheduleRulesetAbridged
 */
export interface ScheduleRulesetAbridged {
  /**
   * 
   * @type {string}
   * @memberof ScheduleRulesetAbridged
   */
  type: ScheduleRulesetAbridgedTypeEnum;
  /**
   * 
   * @type {Array<ScheduleDay>}
   * @memberof ScheduleRulesetAbridged
   */
  day_schedules: Array<ScheduleDay>;
  /**
   * 
   * @type {string}
   * @memberof ScheduleRulesetAbridged
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof ScheduleRulesetAbridged
   */
  default_day_schedule: string;
  /**
   * 
   * @type {Array<ScheduleRuleAbridged>}
   * @memberof ScheduleRulesetAbridged
   */
  schedule_rules?: Array<ScheduleRuleAbridged>;
  /**
   * 
   * @type {string}
   * @memberof ScheduleRulesetAbridged
   */
  summer_designday_schedule?: string;
  /**
   * 
   * @type {string}
   * @memberof ScheduleRulesetAbridged
   */
  winter_designday_schedule?: string;
  /**
   * 
   * @type {string}
   * @memberof ScheduleRulesetAbridged
   */
  schedule_type_limit?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ScheduleRulesetAbridgedTypeEnum {
  ScheduleRulesetAbridged = 'ScheduleRulesetAbridged'
}

/**
 * Specifies the data types and limits for values contained in schedules.
 * @export
 * @interface ScheduleTypeLimit
 */
export interface ScheduleTypeLimit {
  /**
   * 
   * @type {string}
   * @memberof ScheduleTypeLimit
   */
  type: ScheduleTypeLimitTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ScheduleTypeLimit
   */
  name: string;
  /**
   * Lower limit for the schedule type is entered.
   * @type {number}
   * @memberof ScheduleTypeLimit
   */
  lower_limit?: number;
  /**
   * Upper limit for the schedule type is entered.
   * @type {number}
   * @memberof ScheduleTypeLimit
   */
  upper_limit?: number;
  /**
   * 
   * @type {string}
   * @memberof ScheduleTypeLimit
   */
  numeric_type?: ScheduleTypeLimitNumericTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ScheduleTypeLimit
   */
  unit_type?: ScheduleTypeLimitUnitTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ScheduleTypeLimitTypeEnum {
  ScheduleTypeLimit = 'ScheduleTypeLimit'
}
/**
    * @export
    * @enum {string}
    */
export enum ScheduleTypeLimitNumericTypeEnum {
  Continuous = 'Continuous',
  Discrete = 'Discrete'
}
/**
    * @export
    * @enum {string}
    */
export enum ScheduleTypeLimitUnitTypeEnum {
  Dimensionless = 'Dimensionless',
  Temperature = 'Temperature',
  DeltaTemperature = 'DeltaTemperature',
  PrecipitationRate = 'PrecipitationRate',
  Angle = 'Angle',
  ConvectionCoefficient = 'ConvectionCoefficient',
  ActivityLevel = 'ActivityLevel',
  Velocity = 'Velocity',
  Capacity = 'Capacity',
  Power = 'Power',
  Availability = 'Availability',
  Percent = 'Percent',
  Control = 'Control',
  Mode = 'Mode'
}

/**
 * Used to specify information about the setpoint schedule.
 * @export
 * @interface SetpointAbridged
 */
export interface SetpointAbridged {
  /**
   * 
   * @type {string}
   * @memberof SetpointAbridged
   */
  type: SetpointAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof SetpointAbridged
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof SetpointAbridged
   */
  cooling_schedule: string;
  /**
   * 
   * @type {string}
   * @memberof SetpointAbridged
   */
  heating_schedule: string;
  /**
   * 
   * @type {string}
   * @memberof SetpointAbridged
   */
  humidification_schedule?: string;
  /**
   * 
   * @type {string}
   * @memberof SetpointAbridged
   */
  dehumidification_schedule?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SetpointAbridgedTypeEnum {
  SetpointAbridged = 'SetpointAbridged'
}

/**
 * 
 * @export
 * @interface Shade
 */
export interface Shade {
  /**
   * 
   * @type {string}
   * @memberof Shade
   */
  type: ShadeTypeEnum;
  /**
   * 
   * @type {Face3D}
   * @memberof Shade
   */
  geometry: Face3D;
  /**
   * 
   * @type {ShadePropertiesAbridged}
   * @memberof Shade
   */
  properties: ShadePropertiesAbridged;
  /**
   * 
   * @type {string}
   * @memberof Shade
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof Shade
   */
  display_name?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ShadeTypeEnum {
  Shade = 'Shade'
}

/**
 * 
 * @export
 * @interface ShadeConstruction
 */
export interface ShadeConstruction {
  /**
   * 
   * @type {string}
   * @memberof ShadeConstruction
   */
  type: ShadeConstructionTypeEnum;
  /**
   * 
   * @type {boolean}
   * @memberof ShadeConstruction
   */
  is_specular: boolean;
  /**
   * 
   * @type {string}
   * @memberof ShadeConstruction
   */
  name: string;
  /**
   * 
   * @type {number}
   * @memberof ShadeConstruction
   */
  solar_reflectance?: number;
  /**
   * 
   * @type {number}
   * @memberof ShadeConstruction
   */
  visible_reflectance?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ShadeConstructionTypeEnum {
  ShadeConstruction = 'ShadeConstruction'
}

/**
 * 
 * @export
 * @interface ShadeEnergyPropertiesAbridged
 */
export interface ShadeEnergyPropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof ShadeEnergyPropertiesAbridged
   */
  type: ShadeEnergyPropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof ShadeEnergyPropertiesAbridged
   */
  transmittance_schedule?: string;
  /**
   * 
   * @type {string}
   * @memberof ShadeEnergyPropertiesAbridged
   */
  construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ShadeEnergyPropertiesAbridgedTypeEnum {
  ShadeEnergyPropertiesAbridged = 'ShadeEnergyPropertiesAbridged'
}

/**
 * 
 * @export
 * @interface ShadePropertiesAbridged
 */
export interface ShadePropertiesAbridged {
  /**
   * 
   * @type {string}
   * @memberof ShadePropertiesAbridged
   */
  type: ShadePropertiesAbridgedTypeEnum;
  /**
   * 
   * @type {ShadeEnergyPropertiesAbridged}
   * @memberof ShadePropertiesAbridged
   */
  energy?: ShadeEnergyPropertiesAbridged;
}

/**
    * @export
    * @enum {string}
    */
export enum ShadePropertiesAbridgedTypeEnum {
  ShadePropertiesAbridged = 'ShadePropertiesAbridged'
}

/**
 * 
 * @export
 * @interface Surface
 */
export interface Surface {
  /**
   * 
   * @type {string}
   * @memberof Surface
   */
  type: SurfaceTypeEnum;
  /**
   * 
   * @type {Array<string>}
   * @memberof Surface
   */
  boundary_condition_objects: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum SurfaceTypeEnum {
  Surface = 'Surface'
}

/**
 * Used to model the purposeful flow of air from the outdoor environment directly into a thermal zone.
 * @export
 * @interface VentilationAbridged
 */
export interface VentilationAbridged {
  /**
   * 
   * @type {string}
   * @memberof VentilationAbridged
   */
  type: VentilationAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof VentilationAbridged
   */
  name: string;
  /**
   * 
   * @type {number}
   * @memberof VentilationAbridged
   */
  air_changes_per_hour?: number;
  /**
   * Unit is m3/s. Default value is 0.
   * @type {number}
   * @memberof VentilationAbridged
   */
  flow_per_zone?: number;
  /**
   * Used to model the ventilation flow rate per person in m3/s-person.
   * @type {number}
   * @memberof VentilationAbridged
   */
  flow_per_person?: number;
  /**
   * Used to model the ventilation flow rate per zone floor area in m3/s-m2.
   * @type {number}
   * @memberof VentilationAbridged
   */
  flow_per_area?: number;
  /**
   * 
   * @type {string}
   * @memberof VentilationAbridged
   */
  schedule?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VentilationAbridgedTypeEnum {
  VentilationAbridged = 'VentilationAbridged'
}

/**
 * A set of constructions for wall assemblies.
 * @export
 * @interface WallSetAbridged
 */
export interface WallSetAbridged {
  /**
   * 
   * @type {string}
   * @memberof WallSetAbridged
   */
  type: WallSetAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof WallSetAbridged
   */
  interior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof WallSetAbridged
   */
  exterior_construction?: string;
  /**
   * 
   * @type {string}
   * @memberof WallSetAbridged
   */
  ground_construction?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WallSetAbridgedTypeEnum {
  WallSetAbridged = 'WallSetAbridged'
}

/**
 * Group of objects to describe the physical properties and configuration for the building envelope and interior elements that is the windows of the building.
 * @export
 * @interface WindowConstructionAbridged
 */
export interface WindowConstructionAbridged {
  /**
   * 
   * @type {string}
   * @memberof WindowConstructionAbridged
   */
  type: WindowConstructionAbridgedTypeEnum;
  /**
   * 
   * @type {string}
   * @memberof WindowConstructionAbridged
   */
  name: string;
  /**
   * List of materials. The order of the materials is from outside to inside.
   * @type {Array<string>}
   * @memberof WindowConstructionAbridged
   */
  layers: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum WindowConstructionAbridgedTypeEnum {
  WindowConstructionAbridged = 'WindowConstructionAbridged'
}

